#!/usr/bin/env python
#
#  .           .
#  |"-._   _.-'|
#  \    '-"    /
#   '-._   _.-'
#      .: :.
#   ~^~^~^~^~^~
#      Flukes
#
# Quick and dirty tool to tail logs from multiple docker containers,
# with docker-compose-like coloring.
#
# -
#
# The MIT License (MIT)
# 
# Copyright (c) 2015 Espen Notodden
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from __future__ import print_function
import time
import sys
import os
import subprocess
import threading
import Queue
import argparse

COLORS = {
    "grey": 30,
    "red": 31,
    "green": 32,
    "yellow": 33,
    "blue": 34,
    "magenta": 35,
    "cyan": 36,
    "white": 37
}

RESET = '\033[0m'

#Termcolor "mini"
def colored(s, color):
    if os.getenv('ANSI_COLORS_DISABLED') is not None:
        return s
    s = '\033[' + str(COLORS[color]) + 'm' + s
    s += RESET
    return s

class ColorPicker(object):
    possible_colors = ["red", "green", "yellow", "blue", "magenta", "cyan", "white"]
    def __init__(self):
        self.color_index = 0
    def pick(self):
        c = self.possible_colors[self.color_index]
        self.color_index += 1
        if self.color_index == len(self.possible_colors):
            self.color_index = 0
        return c

def enqueue_output(out, queue, container):
    for line in iter(out.readline, b''):
        queue.put({"line": line, "container":container})
    out.close()

def tail_container_logs(containers, **kwargs):
    cp = ColorPicker()
    container_colors = {}

    docker_logs_cmd = ["docker", "logs", "-f"]
    tailn = kwargs.get("tail", -1)
    if tailn > 0:
        docker_logs_cmd += ["--tail", str(tailn)]

    q = Queue.Queue()
    for container in containers:
        container_colors[container] = cp.pick()
        p = subprocess.Popen(docker_logs_cmd + [container],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                bufsize=1,
                close_fds='posix' in sys.builtin_module_names) # Don't close fds on windows.. Dunno why..
                                                               # Trusting stackoverflow until they've been
                                                               # been proven wrong on this
        t = threading.Thread(target=enqueue_output, args=(p.stdout, q, container))
        t.daemon = True
        t.start()

    while 1:
        # Read line async
        try:
            x = q.get_nowait()
        except Queue.Empty:
            # Sleep a bit during "slow" periods.
            # Makes our tight loop a bit less tight and saves some battery :)
            time.sleep(0.1)
        else:
            container = x["container"]
            sys.stdout.write(colored(container + ": ", container_colors[container]) + x["line"])

def main():
    argp = argparse.ArgumentParser()
    argp.add_argument("containers", nargs="*", default="all",
        help="Containers to tail logs from. Defaults to all running containers.")
    argp.add_argument("-t", "--tail", type=int, default=-1,
        help="Number of lines to tail (passed to 'docker logs')")
    args = argp.parse_args()

    containers = args.containers

    if args.containers == "all":
        o = subprocess.check_output("docker ps --format '{{.Names}}'", shell=True)
        containers = o.split("\n")
    try:
        tail_container_logs(containers, tail=args.tail)
    except KeyboardInterrupt:
        return

if __name__ == "__main__":
    main()




